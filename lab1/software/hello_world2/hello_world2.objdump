
hello_world2.elf:     file format elf32-littlenios2
hello_world2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008238

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags r-x
    LOAD off    0x00002b14 vaddr 0x00009b14 paddr 0x00009df8 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x000000dc vaddr 0x0000a0dc paddr 0x0000a0dc align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001898  00008238  00008238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  00009ad0  00009ad0  00002ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  00009b14  00009df8  00002b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  0000a0dc  0000a0dc  000030dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000a200  0000a200  00002df8  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000558  00000000  00000000  00002e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000068a6  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000029a6  00000000  00000000  00009c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00001ae9  00000000  00000000  0000c5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000009c4  00000000  00000000  0000e0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001117  00000000  00000000  0000ea7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000030  00000000  00000000  0000fb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  0000fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 00000d42  00000000  00000000  0000fc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000003ab  00000000  00000000  0001097a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000000e1  00000000  00000000  00010d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  000126f5  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  000126f8  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000126fb  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000126fc  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000126fd  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00012701  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00012705  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  00012709  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  00012712  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  0001271b  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000005  00000000  00000000  00012724  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003a  00000000  00000000  00012729  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0003c9e4  00000000  00000000  00012763  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008238 l    d  .text	00000000 .text
00009ad0 l    d  .rodata	00000000 .rodata
00009b14 l    d  .rwdata	00000000 .rwdata
0000a0dc l    d  .bss	00000000 .bss
0000a200 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
00008280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00009b14 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
0000845c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000085b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000086e8 l     F .text	00000034 alt_dev_reg
00009bf8 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000089e8 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00008ae8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008c40 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00008c6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000901c l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009148 l     F .text	0000003c alt_get_errno
00009184 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000a0fc g     O .bss	00000004 alt_instruction_exception_handler
00008548 g     F .text	0000006c alt_main
000082b8 g     F .text	00000080 _puts_r
0000a100 g     O .bss	00000100 alt_irq
00009df8 g       *ABS*	00000000 __flash_rwdata_start
000095b8 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a0dc g     O .bss	00000004 errno
0000a0e4 g     O .bss	00000004 alt_argv
00011dcc g       *ABS*	00000000 _gp
00009c4c g     O .rwdata	00000180 alt_fd_list
000095dc g     F .text	00000090 alt_find_dev
000090cc g     F .text	0000007c alt_io_redirect
00008338 g     F .text	00000010 puts
000098a4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00008864 g     F .text	000000ec altera_avalon_jtag_uart_read
00009814 g     F .text	00000090 alt_icache_flush
00009de4 g     O .rwdata	00000004 alt_max_fd
00009dcc g     O .rwdata	00000004 _global_impure_ptr
0000a200 g       *ABS*	00000000 __bss_end
00008f34 g     F .text	000000e8 alt_iic_isr_register
0000948c g     F .text	0000012c alt_tick
00008ee8 g     F .text	0000004c alt_ic_irq_enabled
000093e8 g     F .text	000000a4 alt_alarm_stop
0000a0ec g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080fc g     F .exceptions	000000c8 alt_irq_handler
00009c24 g     O .rwdata	00000028 alt_dev_null
00008bf4 g     F .text	0000004c alt_dcache_flush_all
00009df8 g       *ABS*	00000000 __ram_rwdata_end
00009ddc g     O .rwdata	00000008 alt_dev_list
000085f0 g     F .text	000000f8 write
00009b14 g       *ABS*	00000000 __ram_rodata_end
0000a200 g       *ABS*	00000000 end
000081c4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008a64 g     F .text	00000084 alt_avalon_timer_sc_init
00008950 g     F .text	00000098 altera_avalon_jtag_uart_write
00009968 g     F .text	0000012c __call_exitprocs
00008238 g     F .text	0000004c _start
0000a0f0 g     O .bss	00000004 _alt_tick_rate
0000a0f4 g     O .bss	00000008 _alt_nticks
00008758 g     F .text	0000004c alt_sys_init
00009b14 g       *ABS*	00000000 __ram_rwdata_start
00009ad0 g       *ABS*	00000000 __ram_rodata_start
000087a4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009774 g     F .text	000000a0 alt_get_fd
00009938 g     F .text	00000030 memcmp
0000a200 g       *ABS*	00000000 __alt_stack_base
0000966c g     F .text	00000108 alt_find_file
00008ca8 g     F .text	000000a8 alt_dev_llist_insert
00008364 g     F .text	000000a8 __sfvwrite_small_dev
0000a0dc g       *ABS*	00000000 __bss_start
00008284 g     F .text	00000034 main
0000a0e8 g     O .bss	00000004 alt_envp
00008804 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009de8 g     O .rwdata	00000004 alt_errno
00009ad0 g       *ABS*	00000000 __flash_rodata_start
0000871c g     F .text	0000003c alt_irq_init
00009390 g     F .text	00000058 alt_release_fd
0000840c g     F .text	00000050 _write_r
00009dd0 g     O .rwdata	00000004 _impure_ptr
0000a0e0 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
00009dd4 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008d84 g     F .text	00000050 alt_ic_isr_register
00009df8 g       *ABS*	00000000 _edata
0000a200 g       *ABS*	00000000 _end
00008238 g       *ABS*	00000000 __ram_exceptions_end
00008e5c g     F .text	0000008c alt_ic_irq_disable
00009918 g     F .text	00000020 exit
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00009a94 g     F .text	0000003c _exit
00008348 g     F .text	0000001c strlen
0000923c g     F .text	00000154 open
00008d50 g     F .text	00000034 alt_icache_flush_all
00009dec g     O .rwdata	00000004 alt_priority_mask
00008dd4 g     F .text	00000088 alt_ic_irq_enable
00009df0 g     O .rwdata	00000008 alt_alarm_list
00008b24 g     F .text	000000d0 close
000084c4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08608e14 	ori	at,at,33336
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__reset-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
    8094:	e93fff04 	addi	r4,ea,-4
    8098:	00081c40 	call	81c4 <alt_instruction_exception_entry>
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>
    80a0:	ebffff04 	addi	r15,ea,-4
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0ffff17 	ldw	r3,-4(fp)
    8130:	e0bffe17 	ldw	r2,-8(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001126 	beq	r2,zero,8180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	e0bffd17 	ldw	r2,-12(fp)
    8140:	100690fa 	slli	r3,r2,3
    8144:	00800074 	movhi	r2,1
    8148:	1885883a 	add	r2,r3,r2
    814c:	10e84017 	ldw	r3,-24320(r2)
    8150:	e0bffd17 	ldw	r2,-12(fp)
    8154:	100890fa 	slli	r4,r2,3
    8158:	00800074 	movhi	r2,1
    815c:	2085883a 	add	r2,r4,r2
    8160:	10a84117 	ldw	r2,-24316(r2)
    8164:	1009883a 	mov	r4,r2
    8168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    816c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bffb15 	stw	r2,-20(fp)
  return active;
    8178:	e0bffb17 	ldw	r2,-20(fp)
    817c:	00000706 	br	819c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
    8180:	e0bffe17 	ldw	r2,-8(fp)
    8184:	1085883a 	add	r2,r2,r2
    8188:	e0bffe15 	stw	r2,-8(fp)
      i++;
    818c:	e0bffd17 	ldw	r2,-12(fp)
    8190:	10800044 	addi	r2,r2,1
    8194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
    8198:	003fe406 	br	812c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
    819c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    81a0:	e0bfff17 	ldw	r2,-4(fp)
    81a4:	103fde1e 	bne	r2,zero,8120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81a8:	0001883a 	nop
}
    81ac:	0001883a 	nop
    81b0:	e037883a 	mov	sp,fp
    81b4:	dfc00117 	ldw	ra,4(sp)
    81b8:	df000017 	ldw	fp,0(sp)
    81bc:	dec00204 	addi	sp,sp,8
    81c0:	f800283a 	ret

000081c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81c4:	defffb04 	addi	sp,sp,-20
    81c8:	dfc00415 	stw	ra,16(sp)
    81cc:	df000315 	stw	fp,12(sp)
    81d0:	df000304 	addi	fp,sp,12
    81d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    81d8:	000531fa 	rdctl	r2,exception
    81dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    81e0:	e0bfff17 	ldw	r2,-4(fp)
    81e4:	1004d0ba 	srli	r2,r2,2
    81e8:	108007cc 	andi	r2,r2,31
    81ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    81f0:	0005333a 	rdctl	r2,badaddr
    81f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f8:	d0a0cc17 	ldw	r2,-31952(gp)
    81fc:	10000726 	beq	r2,zero,821c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    8200:	d0a0cc17 	ldw	r2,-31952(gp)
    8204:	e0ffff17 	ldw	r3,-4(fp)
    8208:	e1bffe17 	ldw	r6,-8(fp)
    820c:	e17ffd17 	ldw	r5,-12(fp)
    8210:	1809883a 	mov	r4,r3
    8214:	103ee83a 	callr	r2
    8218:	00000206 	br	8224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    821c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8220:	0005883a 	mov	r2,zero
}
    8224:	e037883a 	mov	sp,fp
    8228:	dfc00117 	ldw	ra,4(sp)
    822c:	df000017 	ldw	fp,0(sp)
    8230:	dec00204 	addi	sp,sp,8
    8234:	f800283a 	ret

Disassembly of section .text:

00008238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    823c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    8244:	00bffd16 	blt	zero,r2,823c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8248:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    824c:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8254:	d6877314 	ori	gp,gp,7628
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8258:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    825c:	10a83714 	ori	r2,r2,41180

    movhi r3, %hi(__bss_end)
    8260:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8264:	18e88014 	ori	r3,r3,41472

    beq r2, r3, 1f
    8268:	10c00326 	beq	r2,r3,8278 <_start+0x40>

0:
    stw zero, (r2)
    826c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8274:	10fffd36 	bltu	r2,r3,826c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8278:	00084c40 	call	84c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    827c:	00085480 	call	8548 <alt_main>

00008280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8280:	003fff06 	br	8280 <alt_after_alt_main>

00008284 <main>:
 */

#include <stdio.h>

int main()
{
    8284:	defffe04 	addi	sp,sp,-8
    8288:	dfc00115 	stw	ra,4(sp)
    828c:	df000015 	stw	fp,0(sp)
    8290:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
    8294:	01000074 	movhi	r4,1
    8298:	2126b404 	addi	r4,r4,-25904
    829c:	00083380 	call	8338 <puts>

  return 0;
    82a0:	0005883a 	mov	r2,zero
}
    82a4:	e037883a 	mov	sp,fp
    82a8:	dfc00117 	ldw	ra,4(sp)
    82ac:	df000017 	ldw	fp,0(sp)
    82b0:	dec00204 	addi	sp,sp,8
    82b4:	f800283a 	ret

000082b8 <_puts_r>:
    82b8:	defffd04 	addi	sp,sp,-12
    82bc:	dc000015 	stw	r16,0(sp)
    82c0:	2021883a 	mov	r16,r4
    82c4:	2809883a 	mov	r4,r5
    82c8:	dfc00215 	stw	ra,8(sp)
    82cc:	dc400115 	stw	r17,4(sp)
    82d0:	2823883a 	mov	r17,r5
    82d4:	00083480 	call	8348 <strlen>
    82d8:	81400217 	ldw	r5,8(r16)
    82dc:	00c00074 	movhi	r3,1
    82e0:	18e0d904 	addi	r3,r3,-31900
    82e4:	28c00115 	stw	r3,4(r5)
    82e8:	100f883a 	mov	r7,r2
    82ec:	880d883a 	mov	r6,r17
    82f0:	8009883a 	mov	r4,r16
    82f4:	00083640 	call	8364 <__sfvwrite_small_dev>
    82f8:	10ffffe0 	cmpeqi	r3,r2,-1
    82fc:	1800091e 	bne	r3,zero,8324 <_puts_r+0x6c>
    8300:	81400217 	ldw	r5,8(r16)
    8304:	01800074 	movhi	r6,1
    8308:	01c00044 	movi	r7,1
    830c:	28800117 	ldw	r2,4(r5)
    8310:	31a6b904 	addi	r6,r6,-25884
    8314:	8009883a 	mov	r4,r16
    8318:	103ee83a 	callr	r2
    831c:	10bfffe0 	cmpeqi	r2,r2,-1
    8320:	0085c83a 	sub	r2,zero,r2
    8324:	dfc00217 	ldw	ra,8(sp)
    8328:	dc400117 	ldw	r17,4(sp)
    832c:	dc000017 	ldw	r16,0(sp)
    8330:	dec00304 	addi	sp,sp,12
    8334:	f800283a 	ret

00008338 <puts>:
    8338:	00800074 	movhi	r2,1
    833c:	200b883a 	mov	r5,r4
    8340:	11277417 	ldw	r4,-25136(r2)
    8344:	00082b81 	jmpi	82b8 <_puts_r>

00008348 <strlen>:
    8348:	2005883a 	mov	r2,r4
    834c:	10c00007 	ldb	r3,0(r2)
    8350:	1800021e 	bne	r3,zero,835c <strlen+0x14>
    8354:	1105c83a 	sub	r2,r2,r4
    8358:	f800283a 	ret
    835c:	10800044 	addi	r2,r2,1
    8360:	003ffa06 	br	834c <strlen+0x4>

00008364 <__sfvwrite_small_dev>:
    8364:	2880000b 	ldhu	r2,0(r5)
    8368:	1080020c 	andi	r2,r2,8
    836c:	10002526 	beq	r2,zero,8404 <__sfvwrite_small_dev+0xa0>
    8370:	2880008f 	ldh	r2,2(r5)
    8374:	defffb04 	addi	sp,sp,-20
    8378:	dcc00315 	stw	r19,12(sp)
    837c:	dc800215 	stw	r18,8(sp)
    8380:	dc400115 	stw	r17,4(sp)
    8384:	dc000015 	stw	r16,0(sp)
    8388:	dfc00415 	stw	ra,16(sp)
    838c:	2027883a 	mov	r19,r4
    8390:	2821883a 	mov	r16,r5
    8394:	3025883a 	mov	r18,r6
    8398:	3823883a 	mov	r17,r7
    839c:	1000100e 	bge	r2,zero,83e0 <__sfvwrite_small_dev+0x7c>
    83a0:	8080000b 	ldhu	r2,0(r16)
    83a4:	10801014 	ori	r2,r2,64
    83a8:	8080000d 	sth	r2,0(r16)
    83ac:	00bfffc4 	movi	r2,-1
    83b0:	00000d06 	br	83e8 <__sfvwrite_small_dev+0x84>
    83b4:	88810050 	cmplti	r2,r17,1025
    83b8:	880f883a 	mov	r7,r17
    83bc:	1000011e 	bne	r2,zero,83c4 <__sfvwrite_small_dev+0x60>
    83c0:	01c10004 	movi	r7,1024
    83c4:	8140008f 	ldh	r5,2(r16)
    83c8:	900d883a 	mov	r6,r18
    83cc:	9809883a 	mov	r4,r19
    83d0:	000840c0 	call	840c <_write_r>
    83d4:	00bff20e 	bge	zero,r2,83a0 <__sfvwrite_small_dev+0x3c>
    83d8:	88a3c83a 	sub	r17,r17,r2
    83dc:	90a5883a 	add	r18,r18,r2
    83e0:	047ff416 	blt	zero,r17,83b4 <__sfvwrite_small_dev+0x50>
    83e4:	0005883a 	mov	r2,zero
    83e8:	dfc00417 	ldw	ra,16(sp)
    83ec:	dcc00317 	ldw	r19,12(sp)
    83f0:	dc800217 	ldw	r18,8(sp)
    83f4:	dc400117 	ldw	r17,4(sp)
    83f8:	dc000017 	ldw	r16,0(sp)
    83fc:	dec00504 	addi	sp,sp,20
    8400:	f800283a 	ret
    8404:	00bfffc4 	movi	r2,-1
    8408:	f800283a 	ret

0000840c <_write_r>:
    840c:	defffe04 	addi	sp,sp,-8
    8410:	dc000015 	stw	r16,0(sp)
    8414:	00800074 	movhi	r2,1
    8418:	2021883a 	mov	r16,r4
    841c:	2809883a 	mov	r4,r5
    8420:	300b883a 	mov	r5,r6
    8424:	380d883a 	mov	r6,r7
    8428:	dfc00115 	stw	ra,4(sp)
    842c:	10283715 	stw	zero,-24356(r2)
    8430:	00085f00 	call	85f0 <write>
    8434:	10ffffd8 	cmpnei	r3,r2,-1
    8438:	1800041e 	bne	r3,zero,844c <_write_r+0x40>
    843c:	00c00074 	movhi	r3,1
    8440:	18e83717 	ldw	r3,-24356(r3)
    8444:	18000126 	beq	r3,zero,844c <_write_r+0x40>
    8448:	80c00015 	stw	r3,0(r16)
    844c:	dfc00117 	ldw	ra,4(sp)
    8450:	dc000017 	ldw	r16,0(sp)
    8454:	dec00204 	addi	sp,sp,8
    8458:	f800283a 	ret

0000845c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    845c:	defffc04 	addi	sp,sp,-16
    8460:	df000315 	stw	fp,12(sp)
    8464:	df000304 	addi	fp,sp,12
    8468:	e13fff15 	stw	r4,-4(fp)
    846c:	e17ffe15 	stw	r5,-8(fp)
    8470:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    8474:	e0fffe17 	ldw	r3,-8(fp)
    8478:	e0bfff17 	ldw	r2,-4(fp)
    847c:	18800c26 	beq	r3,r2,84b0 <alt_load_section+0x54>
  {
    while( to != end )
    8480:	00000806 	br	84a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8484:	e0ffff17 	ldw	r3,-4(fp)
    8488:	18800104 	addi	r2,r3,4
    848c:	e0bfff15 	stw	r2,-4(fp)
    8490:	e0bffe17 	ldw	r2,-8(fp)
    8494:	11000104 	addi	r4,r2,4
    8498:	e13ffe15 	stw	r4,-8(fp)
    849c:	18c00017 	ldw	r3,0(r3)
    84a0:	10c00015 	stw	r3,0(r2)
    while( to != end )
    84a4:	e0fffe17 	ldw	r3,-8(fp)
    84a8:	e0bffd17 	ldw	r2,-12(fp)
    84ac:	18bff51e 	bne	r3,r2,8484 <alt_load_section+0x28>
    }
  }
}
    84b0:	0001883a 	nop
    84b4:	e037883a 	mov	sp,fp
    84b8:	df000017 	ldw	fp,0(sp)
    84bc:	dec00104 	addi	sp,sp,4
    84c0:	f800283a 	ret

000084c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    84c4:	defffe04 	addi	sp,sp,-8
    84c8:	dfc00115 	stw	ra,4(sp)
    84cc:	df000015 	stw	fp,0(sp)
    84d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    84d4:	01800074 	movhi	r6,1
    84d8:	31a77e04 	addi	r6,r6,-25096
    84dc:	01400074 	movhi	r5,1
    84e0:	2966c504 	addi	r5,r5,-25836
    84e4:	01000074 	movhi	r4,1
    84e8:	21277e04 	addi	r4,r4,-25096
    84ec:	000845c0 	call	845c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    84f0:	01800074 	movhi	r6,1
    84f4:	31a08e04 	addi	r6,r6,-32200
    84f8:	01400074 	movhi	r5,1
    84fc:	29600804 	addi	r5,r5,-32736
    8500:	01000074 	movhi	r4,1
    8504:	21200804 	addi	r4,r4,-32736
    8508:	000845c0 	call	845c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    850c:	01800074 	movhi	r6,1
    8510:	31a6c504 	addi	r6,r6,-25836
    8514:	01400074 	movhi	r5,1
    8518:	2966b404 	addi	r5,r5,-25904
    851c:	01000074 	movhi	r4,1
    8520:	2126b404 	addi	r4,r4,-25904
    8524:	000845c0 	call	845c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8528:	0008bf40 	call	8bf4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    852c:	0008d500 	call	8d50 <alt_icache_flush_all>
}
    8530:	0001883a 	nop
    8534:	e037883a 	mov	sp,fp
    8538:	dfc00117 	ldw	ra,4(sp)
    853c:	df000017 	ldw	fp,0(sp)
    8540:	dec00204 	addi	sp,sp,8
    8544:	f800283a 	ret

00008548 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8548:	defffd04 	addi	sp,sp,-12
    854c:	dfc00215 	stw	ra,8(sp)
    8550:	df000115 	stw	fp,4(sp)
    8554:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8558:	0009883a 	mov	r4,zero
    855c:	000871c0 	call	871c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8560:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8564:	00087580 	call	8758 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8568:	01800074 	movhi	r6,1
    856c:	31a6ba04 	addi	r6,r6,-25880
    8570:	01400074 	movhi	r5,1
    8574:	2966ba04 	addi	r5,r5,-25880
    8578:	01000074 	movhi	r4,1
    857c:	2126ba04 	addi	r4,r4,-25880
    8580:	00090cc0 	call	90cc <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8584:	d0a0c517 	ldw	r2,-31980(gp)
    8588:	d0e0c617 	ldw	r3,-31976(gp)
    858c:	d120c717 	ldw	r4,-31972(gp)
    8590:	200d883a 	mov	r6,r4
    8594:	180b883a 	mov	r5,r3
    8598:	1009883a 	mov	r4,r2
    859c:	00082840 	call	8284 <main>
    85a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    85a4:	01000044 	movi	r4,1
    85a8:	0008b240 	call	8b24 <close>
  exit (result);
    85ac:	e13fff17 	ldw	r4,-4(fp)
    85b0:	00099180 	call	9918 <exit>

000085b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    85b4:	defffe04 	addi	sp,sp,-8
    85b8:	dfc00115 	stw	ra,4(sp)
    85bc:	df000015 	stw	fp,0(sp)
    85c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    85c4:	d0a00717 	ldw	r2,-32740(gp)
    85c8:	10000326 	beq	r2,zero,85d8 <alt_get_errno+0x24>
    85cc:	d0a00717 	ldw	r2,-32740(gp)
    85d0:	103ee83a 	callr	r2
    85d4:	00000106 	br	85dc <alt_get_errno+0x28>
    85d8:	d0a0c404 	addi	r2,gp,-31984
}
    85dc:	e037883a 	mov	sp,fp
    85e0:	dfc00117 	ldw	ra,4(sp)
    85e4:	df000017 	ldw	fp,0(sp)
    85e8:	dec00204 	addi	sp,sp,8
    85ec:	f800283a 	ret

000085f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    85f0:	defff904 	addi	sp,sp,-28
    85f4:	dfc00615 	stw	ra,24(sp)
    85f8:	df000515 	stw	fp,20(sp)
    85fc:	df000504 	addi	fp,sp,20
    8600:	e13ffd15 	stw	r4,-12(fp)
    8604:	e17ffc15 	stw	r5,-16(fp)
    8608:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    860c:	e0bffd17 	ldw	r2,-12(fp)
    8610:	10000616 	blt	r2,zero,862c <write+0x3c>
    8614:	e0bffd17 	ldw	r2,-12(fp)
    8618:	10c00324 	muli	r3,r2,12
    861c:	00800074 	movhi	r2,1
    8620:	10a71304 	addi	r2,r2,-25524
    8624:	1885883a 	add	r2,r3,r2
    8628:	00000106 	br	8630 <write+0x40>
    862c:	0005883a 	mov	r2,zero
    8630:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    8634:	e0bfff17 	ldw	r2,-4(fp)
    8638:	10002126 	beq	r2,zero,86c0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    863c:	e0bfff17 	ldw	r2,-4(fp)
    8640:	10800217 	ldw	r2,8(r2)
    8644:	108000cc 	andi	r2,r2,3
    8648:	10001826 	beq	r2,zero,86ac <write+0xbc>
    864c:	e0bfff17 	ldw	r2,-4(fp)
    8650:	10800017 	ldw	r2,0(r2)
    8654:	10800617 	ldw	r2,24(r2)
    8658:	10001426 	beq	r2,zero,86ac <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    865c:	e0bfff17 	ldw	r2,-4(fp)
    8660:	10800017 	ldw	r2,0(r2)
    8664:	10800617 	ldw	r2,24(r2)
    8668:	e0fffb17 	ldw	r3,-20(fp)
    866c:	180d883a 	mov	r6,r3
    8670:	e17ffc17 	ldw	r5,-16(fp)
    8674:	e13fff17 	ldw	r4,-4(fp)
    8678:	103ee83a 	callr	r2
    867c:	e0bffe15 	stw	r2,-8(fp)
    8680:	e0bffe17 	ldw	r2,-8(fp)
    8684:	1000070e 	bge	r2,zero,86a4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    8688:	00085b40 	call	85b4 <alt_get_errno>
    868c:	1007883a 	mov	r3,r2
    8690:	e0bffe17 	ldw	r2,-8(fp)
    8694:	0085c83a 	sub	r2,zero,r2
    8698:	18800015 	stw	r2,0(r3)
        return -1;
    869c:	00bfffc4 	movi	r2,-1
    86a0:	00000c06 	br	86d4 <write+0xe4>
      }
      return rval;
    86a4:	e0bffe17 	ldw	r2,-8(fp)
    86a8:	00000a06 	br	86d4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    86ac:	00085b40 	call	85b4 <alt_get_errno>
    86b0:	1007883a 	mov	r3,r2
    86b4:	00800344 	movi	r2,13
    86b8:	18800015 	stw	r2,0(r3)
    86bc:	00000406 	br	86d0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    86c0:	00085b40 	call	85b4 <alt_get_errno>
    86c4:	1007883a 	mov	r3,r2
    86c8:	00801444 	movi	r2,81
    86cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    86d0:	00bfffc4 	movi	r2,-1
}
    86d4:	e037883a 	mov	sp,fp
    86d8:	dfc00117 	ldw	ra,4(sp)
    86dc:	df000017 	ldw	fp,0(sp)
    86e0:	dec00204 	addi	sp,sp,8
    86e4:	f800283a 	ret

000086e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    86e8:	defffd04 	addi	sp,sp,-12
    86ec:	dfc00215 	stw	ra,8(sp)
    86f0:	df000115 	stw	fp,4(sp)
    86f4:	df000104 	addi	fp,sp,4
    86f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    86fc:	d1600404 	addi	r5,gp,-32752
    8700:	e13fff17 	ldw	r4,-4(fp)
    8704:	0008ca80 	call	8ca8 <alt_dev_llist_insert>
}
    8708:	e037883a 	mov	sp,fp
    870c:	dfc00117 	ldw	ra,4(sp)
    8710:	df000017 	ldw	fp,0(sp)
    8714:	dec00204 	addi	sp,sp,8
    8718:	f800283a 	ret

0000871c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    871c:	defffd04 	addi	sp,sp,-12
    8720:	dfc00215 	stw	ra,8(sp)
    8724:	df000115 	stw	fp,4(sp)
    8728:	df000104 	addi	fp,sp,4
    872c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    8730:	00095b80 	call	95b8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8734:	00800044 	movi	r2,1
    8738:	1001703a 	wrctl	status,r2
}
    873c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    8740:	0001883a 	nop
    8744:	e037883a 	mov	sp,fp
    8748:	dfc00117 	ldw	ra,4(sp)
    874c:	df000017 	ldw	fp,0(sp)
    8750:	dec00204 	addi	sp,sp,8
    8754:	f800283a 	ret

00008758 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8758:	defffe04 	addi	sp,sp,-8
    875c:	dfc00115 	stw	ra,4(sp)
    8760:	df000015 	stw	fp,0(sp)
    8764:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    8768:	01c0fa04 	movi	r7,1000
    876c:	01800044 	movi	r6,1
    8770:	000b883a 	mov	r5,zero
    8774:	01000074 	movhi	r4,1
    8778:	0008a640 	call	8a64 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    877c:	01000074 	movhi	r4,1
    8780:	2126fe04 	addi	r4,r4,-25608
    8784:	00086e80 	call	86e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    8788:	0001883a 	nop
}
    878c:	0001883a 	nop
    8790:	e037883a 	mov	sp,fp
    8794:	dfc00117 	ldw	ra,4(sp)
    8798:	df000017 	ldw	fp,0(sp)
    879c:	dec00204 	addi	sp,sp,8
    87a0:	f800283a 	ret

000087a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    87a4:	defffa04 	addi	sp,sp,-24
    87a8:	dfc00515 	stw	ra,20(sp)
    87ac:	df000415 	stw	fp,16(sp)
    87b0:	df000404 	addi	fp,sp,16
    87b4:	e13ffe15 	stw	r4,-8(fp)
    87b8:	e17ffd15 	stw	r5,-12(fp)
    87bc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    87c0:	e0bffe17 	ldw	r2,-8(fp)
    87c4:	10800017 	ldw	r2,0(r2)
    87c8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    87cc:	e0bfff17 	ldw	r2,-4(fp)
    87d0:	10c00a04 	addi	r3,r2,40
    87d4:	e0bffe17 	ldw	r2,-8(fp)
    87d8:	10800217 	ldw	r2,8(r2)
    87dc:	100f883a 	mov	r7,r2
    87e0:	e1bffc17 	ldw	r6,-16(fp)
    87e4:	e17ffd17 	ldw	r5,-12(fp)
    87e8:	1809883a 	mov	r4,r3
    87ec:	00088640 	call	8864 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    87f0:	e037883a 	mov	sp,fp
    87f4:	dfc00117 	ldw	ra,4(sp)
    87f8:	df000017 	ldw	fp,0(sp)
    87fc:	dec00204 	addi	sp,sp,8
    8800:	f800283a 	ret

00008804 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8804:	defffa04 	addi	sp,sp,-24
    8808:	dfc00515 	stw	ra,20(sp)
    880c:	df000415 	stw	fp,16(sp)
    8810:	df000404 	addi	fp,sp,16
    8814:	e13ffe15 	stw	r4,-8(fp)
    8818:	e17ffd15 	stw	r5,-12(fp)
    881c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8820:	e0bffe17 	ldw	r2,-8(fp)
    8824:	10800017 	ldw	r2,0(r2)
    8828:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    882c:	e0bfff17 	ldw	r2,-4(fp)
    8830:	10c00a04 	addi	r3,r2,40
    8834:	e0bffe17 	ldw	r2,-8(fp)
    8838:	10800217 	ldw	r2,8(r2)
    883c:	100f883a 	mov	r7,r2
    8840:	e1bffc17 	ldw	r6,-16(fp)
    8844:	e17ffd17 	ldw	r5,-12(fp)
    8848:	1809883a 	mov	r4,r3
    884c:	00089500 	call	8950 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8850:	e037883a 	mov	sp,fp
    8854:	dfc00117 	ldw	ra,4(sp)
    8858:	df000017 	ldw	fp,0(sp)
    885c:	dec00204 	addi	sp,sp,8
    8860:	f800283a 	ret

00008864 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8864:	defff704 	addi	sp,sp,-36
    8868:	df000815 	stw	fp,32(sp)
    886c:	df000804 	addi	fp,sp,32
    8870:	e13ffb15 	stw	r4,-20(fp)
    8874:	e17ffa15 	stw	r5,-24(fp)
    8878:	e1bff915 	stw	r6,-28(fp)
    887c:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
    8880:	e0bffb17 	ldw	r2,-20(fp)
    8884:	10800017 	ldw	r2,0(r2)
    8888:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
    888c:	e0bffa17 	ldw	r2,-24(fp)
    8890:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
    8894:	e0bff917 	ldw	r2,-28(fp)
    8898:	e0fffa17 	ldw	r3,-24(fp)
    889c:	1885883a 	add	r2,r3,r2
    88a0:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
    88a4:	00001206 	br	88f0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    88a8:	e0bffe17 	ldw	r2,-8(fp)
    88ac:	10800037 	ldwio	r2,0(r2)
    88b0:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    88b4:	e0bffc17 	ldw	r2,-16(fp)
    88b8:	10a0000c 	andi	r2,r2,32768
    88bc:	10000626 	beq	r2,zero,88d8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    88c0:	e0bfff17 	ldw	r2,-4(fp)
    88c4:	10c00044 	addi	r3,r2,1
    88c8:	e0ffff15 	stw	r3,-4(fp)
    88cc:	e0fffc17 	ldw	r3,-16(fp)
    88d0:	10c00005 	stb	r3,0(r2)
    88d4:	00000606 	br	88f0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    88d8:	e0ffff17 	ldw	r3,-4(fp)
    88dc:	e0bffa17 	ldw	r2,-24(fp)
    88e0:	1880071e 	bne	r3,r2,8900 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    88e4:	e0bff817 	ldw	r2,-32(fp)
    88e8:	1090000c 	andi	r2,r2,16384
    88ec:	1000061e 	bne	r2,zero,8908 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
    88f0:	e0ffff17 	ldw	r3,-4(fp)
    88f4:	e0bffd17 	ldw	r2,-12(fp)
    88f8:	18bfeb36 	bltu	r3,r2,88a8 <altera_avalon_jtag_uart_read+0x44>
    88fc:	00000306 	br	890c <altera_avalon_jtag_uart_read+0xa8>
      break;
    8900:	0001883a 	nop
    8904:	00000106 	br	890c <altera_avalon_jtag_uart_read+0xa8>
      break;   
    8908:	0001883a 	nop
    
  }

  if (ptr != buffer)
    890c:	e0ffff17 	ldw	r3,-4(fp)
    8910:	e0bffa17 	ldw	r2,-24(fp)
    8914:	18800426 	beq	r3,r2,8928 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    8918:	e0ffff17 	ldw	r3,-4(fp)
    891c:	e0bffa17 	ldw	r2,-24(fp)
    8920:	1885c83a 	sub	r2,r3,r2
    8924:	00000606 	br	8940 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    8928:	e0bff817 	ldw	r2,-32(fp)
    892c:	1090000c 	andi	r2,r2,16384
    8930:	10000226 	beq	r2,zero,893c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    8934:	00bffd44 	movi	r2,-11
    8938:	00000106 	br	8940 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    893c:	00bffec4 	movi	r2,-5
}
    8940:	e037883a 	mov	sp,fp
    8944:	df000017 	ldw	fp,0(sp)
    8948:	dec00104 	addi	sp,sp,4
    894c:	f800283a 	ret

00008950 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8950:	defff904 	addi	sp,sp,-28
    8954:	df000615 	stw	fp,24(sp)
    8958:	df000604 	addi	fp,sp,24
    895c:	e13ffd15 	stw	r4,-12(fp)
    8960:	e17ffc15 	stw	r5,-16(fp)
    8964:	e1bffb15 	stw	r6,-20(fp)
    8968:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
    896c:	e0bffd17 	ldw	r2,-12(fp)
    8970:	10800017 	ldw	r2,0(r2)
    8974:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
    8978:	e0bffb17 	ldw	r2,-20(fp)
    897c:	e0fffc17 	ldw	r3,-16(fp)
    8980:	1885883a 	add	r2,r3,r2
    8984:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
    8988:	00000f06 	br	89c8 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    898c:	e0bfff17 	ldw	r2,-4(fp)
    8990:	10800104 	addi	r2,r2,4
    8994:	10800037 	ldwio	r2,0(r2)
    8998:	1007883a 	mov	r3,r2
    899c:	00bfffd4 	movui	r2,65535
    89a0:	10c0092e 	bgeu	r2,r3,89c8 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    89a4:	e0ffff17 	ldw	r3,-4(fp)
    89a8:	e0bffc17 	ldw	r2,-16(fp)
    89ac:	11000044 	addi	r4,r2,1
    89b0:	e13ffc15 	stw	r4,-16(fp)
    89b4:	10800003 	ldbu	r2,0(r2)
    89b8:	10803fcc 	andi	r2,r2,255
    89bc:	1080201c 	xori	r2,r2,128
    89c0:	10bfe004 	addi	r2,r2,-128
    89c4:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
    89c8:	e0fffc17 	ldw	r3,-16(fp)
    89cc:	e0bffe17 	ldw	r2,-8(fp)
    89d0:	18bfee36 	bltu	r3,r2,898c <altera_avalon_jtag_uart_write+0x3c>

  return count;
    89d4:	e0bffb17 	ldw	r2,-20(fp)
}
    89d8:	e037883a 	mov	sp,fp
    89dc:	df000017 	ldw	fp,0(sp)
    89e0:	dec00104 	addi	sp,sp,4
    89e4:	f800283a 	ret

000089e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    89e8:	defffa04 	addi	sp,sp,-24
    89ec:	dfc00515 	stw	ra,20(sp)
    89f0:	df000415 	stw	fp,16(sp)
    89f4:	df000404 	addi	fp,sp,16
    89f8:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    89fc:	0007883a 	mov	r3,zero
    8a00:	e0bffc17 	ldw	r2,-16(fp)
    8a04:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    8a08:	e0bffc17 	ldw	r2,-16(fp)
    8a0c:	10800104 	addi	r2,r2,4
    8a10:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    8a14:	0005303a 	rdctl	r2,status
    8a18:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a1c:	e0fffd17 	ldw	r3,-12(fp)
    8a20:	00bfff84 	movi	r2,-2
    8a24:	1884703a 	and	r2,r3,r2
    8a28:	1001703a 	wrctl	status,r2
  return context;
    8a2c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    8a30:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    8a34:	000948c0 	call	948c <alt_tick>
    8a38:	e0bfff17 	ldw	r2,-4(fp)
    8a3c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    8a40:	e0bffe17 	ldw	r2,-8(fp)
    8a44:	1001703a 	wrctl	status,r2
}
    8a48:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    8a4c:	0001883a 	nop
    8a50:	e037883a 	mov	sp,fp
    8a54:	dfc00117 	ldw	ra,4(sp)
    8a58:	df000017 	ldw	fp,0(sp)
    8a5c:	dec00204 	addi	sp,sp,8
    8a60:	f800283a 	ret

00008a64 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    8a64:	defff804 	addi	sp,sp,-32
    8a68:	dfc00715 	stw	ra,28(sp)
    8a6c:	df000615 	stw	fp,24(sp)
    8a70:	df000604 	addi	fp,sp,24
    8a74:	e13ffe15 	stw	r4,-8(fp)
    8a78:	e17ffd15 	stw	r5,-12(fp)
    8a7c:	e1bffc15 	stw	r6,-16(fp)
    8a80:	e1fffb15 	stw	r7,-20(fp)
    8a84:	e0bffb17 	ldw	r2,-20(fp)
    8a88:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    8a8c:	d0a0c917 	ldw	r2,-31964(gp)
    8a90:	1000031e 	bne	r2,zero,8aa0 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
    8a94:	e0bfff17 	ldw	r2,-4(fp)
    8a98:	d0a0c915 	stw	r2,-31964(gp)
    return 0;
    8a9c:	00000106 	br	8aa4 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
    8aa0:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    8aa4:	e0bffe17 	ldw	r2,-8(fp)
    8aa8:	10800104 	addi	r2,r2,4
    8aac:	00c001c4 	movi	r3,7
    8ab0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    8ab4:	d8000015 	stw	zero,0(sp)
    8ab8:	e1fffe17 	ldw	r7,-8(fp)
    8abc:	01800074 	movhi	r6,1
    8ac0:	31a27a04 	addi	r6,r6,-30232
    8ac4:	e17ffc17 	ldw	r5,-16(fp)
    8ac8:	e13ffd17 	ldw	r4,-12(fp)
    8acc:	0008d840 	call	8d84 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    8ad0:	0001883a 	nop
    8ad4:	e037883a 	mov	sp,fp
    8ad8:	dfc00117 	ldw	ra,4(sp)
    8adc:	df000017 	ldw	fp,0(sp)
    8ae0:	dec00204 	addi	sp,sp,8
    8ae4:	f800283a 	ret

00008ae8 <alt_get_errno>:
{
    8ae8:	defffe04 	addi	sp,sp,-8
    8aec:	dfc00115 	stw	ra,4(sp)
    8af0:	df000015 	stw	fp,0(sp)
    8af4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8af8:	d0a00717 	ldw	r2,-32740(gp)
    8afc:	10000326 	beq	r2,zero,8b0c <alt_get_errno+0x24>
    8b00:	d0a00717 	ldw	r2,-32740(gp)
    8b04:	103ee83a 	callr	r2
    8b08:	00000106 	br	8b10 <alt_get_errno+0x28>
    8b0c:	d0a0c404 	addi	r2,gp,-31984
}
    8b10:	e037883a 	mov	sp,fp
    8b14:	dfc00117 	ldw	ra,4(sp)
    8b18:	df000017 	ldw	fp,0(sp)
    8b1c:	dec00204 	addi	sp,sp,8
    8b20:	f800283a 	ret

00008b24 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8b24:	defffb04 	addi	sp,sp,-20
    8b28:	dfc00415 	stw	ra,16(sp)
    8b2c:	df000315 	stw	fp,12(sp)
    8b30:	df000304 	addi	fp,sp,12
    8b34:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8b38:	e0bffd17 	ldw	r2,-12(fp)
    8b3c:	10000616 	blt	r2,zero,8b58 <close+0x34>
    8b40:	e0bffd17 	ldw	r2,-12(fp)
    8b44:	10c00324 	muli	r3,r2,12
    8b48:	00800074 	movhi	r2,1
    8b4c:	10a71304 	addi	r2,r2,-25524
    8b50:	1885883a 	add	r2,r3,r2
    8b54:	00000106 	br	8b5c <close+0x38>
    8b58:	0005883a 	mov	r2,zero
    8b5c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    8b60:	e0bfff17 	ldw	r2,-4(fp)
    8b64:	10001926 	beq	r2,zero,8bcc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    8b68:	e0bfff17 	ldw	r2,-4(fp)
    8b6c:	10800017 	ldw	r2,0(r2)
    8b70:	10800417 	ldw	r2,16(r2)
    8b74:	10000626 	beq	r2,zero,8b90 <close+0x6c>
    8b78:	e0bfff17 	ldw	r2,-4(fp)
    8b7c:	10800017 	ldw	r2,0(r2)
    8b80:	10800417 	ldw	r2,16(r2)
    8b84:	e13fff17 	ldw	r4,-4(fp)
    8b88:	103ee83a 	callr	r2
    8b8c:	00000106 	br	8b94 <close+0x70>
    8b90:	0005883a 	mov	r2,zero
    8b94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    8b98:	e13ffd17 	ldw	r4,-12(fp)
    8b9c:	00093900 	call	9390 <alt_release_fd>
    if (rval < 0)
    8ba0:	e0bffe17 	ldw	r2,-8(fp)
    8ba4:	1000070e 	bge	r2,zero,8bc4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    8ba8:	0008ae80 	call	8ae8 <alt_get_errno>
    8bac:	1007883a 	mov	r3,r2
    8bb0:	e0bffe17 	ldw	r2,-8(fp)
    8bb4:	0085c83a 	sub	r2,zero,r2
    8bb8:	18800015 	stw	r2,0(r3)
      return -1;
    8bbc:	00bfffc4 	movi	r2,-1
    8bc0:	00000706 	br	8be0 <close+0xbc>
    }
    return 0;
    8bc4:	0005883a 	mov	r2,zero
    8bc8:	00000506 	br	8be0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8bcc:	0008ae80 	call	8ae8 <alt_get_errno>
    8bd0:	1007883a 	mov	r3,r2
    8bd4:	00801444 	movi	r2,81
    8bd8:	18800015 	stw	r2,0(r3)
    return -1;
    8bdc:	00bfffc4 	movi	r2,-1
  }
}
    8be0:	e037883a 	mov	sp,fp
    8be4:	dfc00117 	ldw	ra,4(sp)
    8be8:	df000017 	ldw	fp,0(sp)
    8bec:	dec00204 	addi	sp,sp,8
    8bf0:	f800283a 	ret

00008bf4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8bf4:	defffe04 	addi	sp,sp,-8
    8bf8:	df000115 	stw	fp,4(sp)
    8bfc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    8c00:	e03fff15 	stw	zero,-4(fp)
    8c04:	00000506 	br	8c1c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    8c08:	e0bfff17 	ldw	r2,-4(fp)
    8c0c:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    8c10:	e0bfff17 	ldw	r2,-4(fp)
    8c14:	10800804 	addi	r2,r2,32
    8c18:	e0bfff15 	stw	r2,-4(fp)
    8c1c:	e0bfff17 	ldw	r2,-4(fp)
    8c20:	10820030 	cmpltui	r2,r2,2048
    8c24:	103ff81e 	bne	r2,zero,8c08 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8c28:	0001883a 	nop
    8c2c:	0001883a 	nop
    8c30:	e037883a 	mov	sp,fp
    8c34:	df000017 	ldw	fp,0(sp)
    8c38:	dec00104 	addi	sp,sp,4
    8c3c:	f800283a 	ret

00008c40 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8c40:	defffc04 	addi	sp,sp,-16
    8c44:	df000315 	stw	fp,12(sp)
    8c48:	df000304 	addi	fp,sp,12
    8c4c:	e13fff15 	stw	r4,-4(fp)
    8c50:	e17ffe15 	stw	r5,-8(fp)
    8c54:	e1bffd15 	stw	r6,-12(fp)
  return len;
    8c58:	e0bffd17 	ldw	r2,-12(fp)
}
    8c5c:	e037883a 	mov	sp,fp
    8c60:	df000017 	ldw	fp,0(sp)
    8c64:	dec00104 	addi	sp,sp,4
    8c68:	f800283a 	ret

00008c6c <alt_get_errno>:
{
    8c6c:	defffe04 	addi	sp,sp,-8
    8c70:	dfc00115 	stw	ra,4(sp)
    8c74:	df000015 	stw	fp,0(sp)
    8c78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8c7c:	d0a00717 	ldw	r2,-32740(gp)
    8c80:	10000326 	beq	r2,zero,8c90 <alt_get_errno+0x24>
    8c84:	d0a00717 	ldw	r2,-32740(gp)
    8c88:	103ee83a 	callr	r2
    8c8c:	00000106 	br	8c94 <alt_get_errno+0x28>
    8c90:	d0a0c404 	addi	r2,gp,-31984
}
    8c94:	e037883a 	mov	sp,fp
    8c98:	dfc00117 	ldw	ra,4(sp)
    8c9c:	df000017 	ldw	fp,0(sp)
    8ca0:	dec00204 	addi	sp,sp,8
    8ca4:	f800283a 	ret

00008ca8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    8ca8:	defffa04 	addi	sp,sp,-24
    8cac:	dfc00515 	stw	ra,20(sp)
    8cb0:	df000415 	stw	fp,16(sp)
    8cb4:	df000404 	addi	fp,sp,16
    8cb8:	e13ffd15 	stw	r4,-12(fp)
    8cbc:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    8cc0:	e0bffd17 	ldw	r2,-12(fp)
    8cc4:	10000326 	beq	r2,zero,8cd4 <alt_dev_llist_insert+0x2c>
    8cc8:	e0bffd17 	ldw	r2,-12(fp)
    8ccc:	10800217 	ldw	r2,8(r2)
    8cd0:	1000061e 	bne	r2,zero,8cec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    8cd4:	0008c6c0 	call	8c6c <alt_get_errno>
    8cd8:	1007883a 	mov	r3,r2
    8cdc:	00800584 	movi	r2,22
    8ce0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    8ce4:	00bffa84 	movi	r2,-22
    8ce8:	00001406 	br	8d3c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    8cec:	e0bffd17 	ldw	r2,-12(fp)
    8cf0:	e0fffc17 	ldw	r3,-16(fp)
    8cf4:	e0ffff15 	stw	r3,-4(fp)
    8cf8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8cfc:	e0bffe17 	ldw	r2,-8(fp)
    8d00:	e0ffff17 	ldw	r3,-4(fp)
    8d04:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    8d08:	e0bfff17 	ldw	r2,-4(fp)
    8d0c:	10c00017 	ldw	r3,0(r2)
    8d10:	e0bffe17 	ldw	r2,-8(fp)
    8d14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8d18:	e0bfff17 	ldw	r2,-4(fp)
    8d1c:	10800017 	ldw	r2,0(r2)
    8d20:	e0fffe17 	ldw	r3,-8(fp)
    8d24:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    8d28:	e0bfff17 	ldw	r2,-4(fp)
    8d2c:	e0fffe17 	ldw	r3,-8(fp)
    8d30:	10c00015 	stw	r3,0(r2)
}
    8d34:	0001883a 	nop

  return 0;  
    8d38:	0005883a 	mov	r2,zero
}
    8d3c:	e037883a 	mov	sp,fp
    8d40:	dfc00117 	ldw	ra,4(sp)
    8d44:	df000017 	ldw	fp,0(sp)
    8d48:	dec00204 	addi	sp,sp,8
    8d4c:	f800283a 	ret

00008d50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8d50:	defffe04 	addi	sp,sp,-8
    8d54:	dfc00115 	stw	ra,4(sp)
    8d58:	df000015 	stw	fp,0(sp)
    8d5c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8d60:	01420004 	movi	r5,2048
    8d64:	0009883a 	mov	r4,zero
    8d68:	00098140 	call	9814 <alt_icache_flush>
#endif
}
    8d6c:	0001883a 	nop
    8d70:	e037883a 	mov	sp,fp
    8d74:	dfc00117 	ldw	ra,4(sp)
    8d78:	df000017 	ldw	fp,0(sp)
    8d7c:	dec00204 	addi	sp,sp,8
    8d80:	f800283a 	ret

00008d84 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8d84:	defff904 	addi	sp,sp,-28
    8d88:	dfc00615 	stw	ra,24(sp)
    8d8c:	df000515 	stw	fp,20(sp)
    8d90:	df000504 	addi	fp,sp,20
    8d94:	e13fff15 	stw	r4,-4(fp)
    8d98:	e17ffe15 	stw	r5,-8(fp)
    8d9c:	e1bffd15 	stw	r6,-12(fp)
    8da0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    8da4:	e0800217 	ldw	r2,8(fp)
    8da8:	d8800015 	stw	r2,0(sp)
    8dac:	e1fffc17 	ldw	r7,-16(fp)
    8db0:	e1bffd17 	ldw	r6,-12(fp)
    8db4:	e17ffe17 	ldw	r5,-8(fp)
    8db8:	e13fff17 	ldw	r4,-4(fp)
    8dbc:	0008f340 	call	8f34 <alt_iic_isr_register>
}  
    8dc0:	e037883a 	mov	sp,fp
    8dc4:	dfc00117 	ldw	ra,4(sp)
    8dc8:	df000017 	ldw	fp,0(sp)
    8dcc:	dec00204 	addi	sp,sp,8
    8dd0:	f800283a 	ret

00008dd4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    8dd4:	defff904 	addi	sp,sp,-28
    8dd8:	df000615 	stw	fp,24(sp)
    8ddc:	df000604 	addi	fp,sp,24
    8de0:	e13ffb15 	stw	r4,-20(fp)
    8de4:	e17ffa15 	stw	r5,-24(fp)
    8de8:	e0bffa17 	ldw	r2,-24(fp)
    8dec:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    8df0:	0005303a 	rdctl	r2,status
    8df4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8df8:	e0fffe17 	ldw	r3,-8(fp)
    8dfc:	00bfff84 	movi	r2,-2
    8e00:	1884703a 	and	r2,r3,r2
    8e04:	1001703a 	wrctl	status,r2
  return context;
    8e08:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8e0c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    8e10:	00c00044 	movi	r3,1
    8e14:	e0bfff17 	ldw	r2,-4(fp)
    8e18:	1884983a 	sll	r2,r3,r2
    8e1c:	1007883a 	mov	r3,r2
    8e20:	d0a0c817 	ldw	r2,-31968(gp)
    8e24:	1884b03a 	or	r2,r3,r2
    8e28:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8e2c:	d0a0c817 	ldw	r2,-31968(gp)
    8e30:	100170fa 	wrctl	ienable,r2
    8e34:	e0bffd17 	ldw	r2,-12(fp)
    8e38:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    8e3c:	e0bffc17 	ldw	r2,-16(fp)
    8e40:	1001703a 	wrctl	status,r2
}
    8e44:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    8e48:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    8e4c:	e037883a 	mov	sp,fp
    8e50:	df000017 	ldw	fp,0(sp)
    8e54:	dec00104 	addi	sp,sp,4
    8e58:	f800283a 	ret

00008e5c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    8e5c:	defff904 	addi	sp,sp,-28
    8e60:	df000615 	stw	fp,24(sp)
    8e64:	df000604 	addi	fp,sp,24
    8e68:	e13ffb15 	stw	r4,-20(fp)
    8e6c:	e17ffa15 	stw	r5,-24(fp)
    8e70:	e0bffa17 	ldw	r2,-24(fp)
    8e74:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    8e78:	0005303a 	rdctl	r2,status
    8e7c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e80:	e0fffe17 	ldw	r3,-8(fp)
    8e84:	00bfff84 	movi	r2,-2
    8e88:	1884703a 	and	r2,r3,r2
    8e8c:	1001703a 	wrctl	status,r2
  return context;
    8e90:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
    8e94:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
    8e98:	00c00044 	movi	r3,1
    8e9c:	e0bfff17 	ldw	r2,-4(fp)
    8ea0:	1884983a 	sll	r2,r3,r2
    8ea4:	0084303a 	nor	r2,zero,r2
    8ea8:	1007883a 	mov	r3,r2
    8eac:	d0a0c817 	ldw	r2,-31968(gp)
    8eb0:	1884703a 	and	r2,r3,r2
    8eb4:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8eb8:	d0a0c817 	ldw	r2,-31968(gp)
    8ebc:	100170fa 	wrctl	ienable,r2
    8ec0:	e0bffd17 	ldw	r2,-12(fp)
    8ec4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    8ec8:	e0bffc17 	ldw	r2,-16(fp)
    8ecc:	1001703a 	wrctl	status,r2
}
    8ed0:	0001883a 	nop
  return 0;
    8ed4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    8ed8:	e037883a 	mov	sp,fp
    8edc:	df000017 	ldw	fp,0(sp)
    8ee0:	dec00104 	addi	sp,sp,4
    8ee4:	f800283a 	ret

00008ee8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    8ee8:	defffc04 	addi	sp,sp,-16
    8eec:	df000315 	stw	fp,12(sp)
    8ef0:	df000304 	addi	fp,sp,12
    8ef4:	e13ffe15 	stw	r4,-8(fp)
    8ef8:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    8efc:	000530fa 	rdctl	r2,ienable
    8f00:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    8f04:	00c00044 	movi	r3,1
    8f08:	e0bffd17 	ldw	r2,-12(fp)
    8f0c:	1884983a 	sll	r2,r3,r2
    8f10:	1007883a 	mov	r3,r2
    8f14:	e0bfff17 	ldw	r2,-4(fp)
    8f18:	1884703a 	and	r2,r3,r2
    8f1c:	1004c03a 	cmpne	r2,r2,zero
    8f20:	10803fcc 	andi	r2,r2,255
}
    8f24:	e037883a 	mov	sp,fp
    8f28:	df000017 	ldw	fp,0(sp)
    8f2c:	dec00104 	addi	sp,sp,4
    8f30:	f800283a 	ret

00008f34 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8f34:	defff504 	addi	sp,sp,-44
    8f38:	dfc00a15 	stw	ra,40(sp)
    8f3c:	df000915 	stw	fp,36(sp)
    8f40:	df000904 	addi	fp,sp,36
    8f44:	e13ffa15 	stw	r4,-24(fp)
    8f48:	e17ff915 	stw	r5,-28(fp)
    8f4c:	e1bff815 	stw	r6,-32(fp)
    8f50:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
    8f54:	00bffa84 	movi	r2,-22
    8f58:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    8f5c:	e0bff917 	ldw	r2,-28(fp)
    8f60:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    8f64:	e0bffe17 	ldw	r2,-8(fp)
    8f68:	10800808 	cmpgei	r2,r2,32
    8f6c:	1000251e 	bne	r2,zero,9004 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
    8f70:	0005303a 	rdctl	r2,status
    8f74:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f78:	e0fffc17 	ldw	r3,-16(fp)
    8f7c:	00bfff84 	movi	r2,-2
    8f80:	1884703a 	and	r2,r3,r2
    8f84:	1001703a 	wrctl	status,r2
  return context;
    8f88:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    8f8c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
    8f90:	e0bffe17 	ldw	r2,-8(fp)
    8f94:	100890fa 	slli	r4,r2,3
    8f98:	e0fff817 	ldw	r3,-32(fp)
    8f9c:	00800074 	movhi	r2,1
    8fa0:	2085883a 	add	r2,r4,r2
    8fa4:	10e84015 	stw	r3,-24320(r2)
    alt_irq[id].context = isr_context;
    8fa8:	e0bffe17 	ldw	r2,-8(fp)
    8fac:	100890fa 	slli	r4,r2,3
    8fb0:	e0fff717 	ldw	r3,-36(fp)
    8fb4:	00800074 	movhi	r2,1
    8fb8:	2085883a 	add	r2,r4,r2
    8fbc:	10e84115 	stw	r3,-24316(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    8fc0:	e0bff817 	ldw	r2,-32(fp)
    8fc4:	10000526 	beq	r2,zero,8fdc <alt_iic_isr_register+0xa8>
    8fc8:	e0bffe17 	ldw	r2,-8(fp)
    8fcc:	100b883a 	mov	r5,r2
    8fd0:	e13ffa17 	ldw	r4,-24(fp)
    8fd4:	0008dd40 	call	8dd4 <alt_ic_irq_enable>
    8fd8:	00000406 	br	8fec <alt_iic_isr_register+0xb8>
    8fdc:	e0bffe17 	ldw	r2,-8(fp)
    8fe0:	100b883a 	mov	r5,r2
    8fe4:	e13ffa17 	ldw	r4,-24(fp)
    8fe8:	0008e5c0 	call	8e5c <alt_ic_irq_disable>
    8fec:	e0bfff15 	stw	r2,-4(fp)
    8ff0:	e0bffd17 	ldw	r2,-12(fp)
    8ff4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    8ff8:	e0bffb17 	ldw	r2,-20(fp)
    8ffc:	1001703a 	wrctl	status,r2
}
    9000:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    9004:	e0bfff17 	ldw	r2,-4(fp)
}
    9008:	e037883a 	mov	sp,fp
    900c:	dfc00117 	ldw	ra,4(sp)
    9010:	df000017 	ldw	fp,0(sp)
    9014:	dec00204 	addi	sp,sp,8
    9018:	f800283a 	ret

0000901c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    901c:	defff904 	addi	sp,sp,-28
    9020:	dfc00615 	stw	ra,24(sp)
    9024:	df000515 	stw	fp,20(sp)
    9028:	df000504 	addi	fp,sp,20
    902c:	e13ffe15 	stw	r4,-8(fp)
    9030:	e17ffd15 	stw	r5,-12(fp)
    9034:	e1bffc15 	stw	r6,-16(fp)
    9038:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    903c:	e1bffb17 	ldw	r6,-20(fp)
    9040:	e17ffc17 	ldw	r5,-16(fp)
    9044:	e13ffd17 	ldw	r4,-12(fp)
    9048:	000923c0 	call	923c <open>
    904c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    9050:	e0bfff17 	ldw	r2,-4(fp)
    9054:	10001716 	blt	r2,zero,90b4 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
    9058:	e0bfff17 	ldw	r2,-4(fp)
    905c:	10c00324 	muli	r3,r2,12
    9060:	00800074 	movhi	r2,1
    9064:	1885883a 	add	r2,r3,r2
    9068:	10e71317 	ldw	r3,-25524(r2)
    906c:	e0bffe17 	ldw	r2,-8(fp)
    9070:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9074:	e0bfff17 	ldw	r2,-4(fp)
    9078:	10c00324 	muli	r3,r2,12
    907c:	00800074 	movhi	r2,1
    9080:	1885883a 	add	r2,r3,r2
    9084:	10e71417 	ldw	r3,-25520(r2)
    9088:	e0bffe17 	ldw	r2,-8(fp)
    908c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9090:	e0bfff17 	ldw	r2,-4(fp)
    9094:	10c00324 	muli	r3,r2,12
    9098:	00800074 	movhi	r2,1
    909c:	1885883a 	add	r2,r3,r2
    90a0:	10e71517 	ldw	r3,-25516(r2)
    90a4:	e0bffe17 	ldw	r2,-8(fp)
    90a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    90ac:	e13fff17 	ldw	r4,-4(fp)
    90b0:	00093900 	call	9390 <alt_release_fd>
  }
} 
    90b4:	0001883a 	nop
    90b8:	e037883a 	mov	sp,fp
    90bc:	dfc00117 	ldw	ra,4(sp)
    90c0:	df000017 	ldw	fp,0(sp)
    90c4:	dec00204 	addi	sp,sp,8
    90c8:	f800283a 	ret

000090cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    90cc:	defffb04 	addi	sp,sp,-20
    90d0:	dfc00415 	stw	ra,16(sp)
    90d4:	df000315 	stw	fp,12(sp)
    90d8:	df000304 	addi	fp,sp,12
    90dc:	e13fff15 	stw	r4,-4(fp)
    90e0:	e17ffe15 	stw	r5,-8(fp)
    90e4:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    90e8:	01c07fc4 	movi	r7,511
    90ec:	01800044 	movi	r6,1
    90f0:	e17fff17 	ldw	r5,-4(fp)
    90f4:	01000074 	movhi	r4,1
    90f8:	21271604 	addi	r4,r4,-25512
    90fc:	000901c0 	call	901c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9100:	01c07fc4 	movi	r7,511
    9104:	000d883a 	mov	r6,zero
    9108:	e17ffe17 	ldw	r5,-8(fp)
    910c:	01000074 	movhi	r4,1
    9110:	21271304 	addi	r4,r4,-25524
    9114:	000901c0 	call	901c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9118:	01c07fc4 	movi	r7,511
    911c:	01800044 	movi	r6,1
    9120:	e17ffd17 	ldw	r5,-12(fp)
    9124:	01000074 	movhi	r4,1
    9128:	21271904 	addi	r4,r4,-25500
    912c:	000901c0 	call	901c <alt_open_fd>
}  
    9130:	0001883a 	nop
    9134:	e037883a 	mov	sp,fp
    9138:	dfc00117 	ldw	ra,4(sp)
    913c:	df000017 	ldw	fp,0(sp)
    9140:	dec00204 	addi	sp,sp,8
    9144:	f800283a 	ret

00009148 <alt_get_errno>:
{
    9148:	defffe04 	addi	sp,sp,-8
    914c:	dfc00115 	stw	ra,4(sp)
    9150:	df000015 	stw	fp,0(sp)
    9154:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9158:	d0a00717 	ldw	r2,-32740(gp)
    915c:	10000326 	beq	r2,zero,916c <alt_get_errno+0x24>
    9160:	d0a00717 	ldw	r2,-32740(gp)
    9164:	103ee83a 	callr	r2
    9168:	00000106 	br	9170 <alt_get_errno+0x28>
    916c:	d0a0c404 	addi	r2,gp,-31984
}
    9170:	e037883a 	mov	sp,fp
    9174:	dfc00117 	ldw	ra,4(sp)
    9178:	df000017 	ldw	fp,0(sp)
    917c:	dec00204 	addi	sp,sp,8
    9180:	f800283a 	ret

00009184 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9184:	defffd04 	addi	sp,sp,-12
    9188:	df000215 	stw	fp,8(sp)
    918c:	df000204 	addi	fp,sp,8
    9190:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9194:	e0bffe17 	ldw	r2,-8(fp)
    9198:	10800217 	ldw	r2,8(r2)
    919c:	10d00034 	orhi	r3,r2,16384
    91a0:	e0bffe17 	ldw	r2,-8(fp)
    91a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    91a8:	e03fff15 	stw	zero,-4(fp)
    91ac:	00001a06 	br	9218 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    91b0:	e0bfff17 	ldw	r2,-4(fp)
    91b4:	10c00324 	muli	r3,r2,12
    91b8:	00800074 	movhi	r2,1
    91bc:	1885883a 	add	r2,r3,r2
    91c0:	10e71317 	ldw	r3,-25524(r2)
    91c4:	e0bffe17 	ldw	r2,-8(fp)
    91c8:	10800017 	ldw	r2,0(r2)
    91cc:	18800f1e 	bne	r3,r2,920c <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    91d0:	e0bfff17 	ldw	r2,-4(fp)
    91d4:	10c00324 	muli	r3,r2,12
    91d8:	00800074 	movhi	r2,1
    91dc:	1885883a 	add	r2,r3,r2
    91e0:	10a71517 	ldw	r2,-25516(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
    91e4:	1000090e 	bge	r2,zero,920c <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
    91e8:	e0bfff17 	ldw	r2,-4(fp)
    91ec:	10c00324 	muli	r3,r2,12
    91f0:	00800074 	movhi	r2,1
    91f4:	10a71304 	addi	r2,r2,-25524
    91f8:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    91fc:	e0fffe17 	ldw	r3,-8(fp)
    9200:	18800226 	beq	r3,r2,920c <alt_file_locked+0x88>
    {
      return -EACCES;
    9204:	00bffcc4 	movi	r2,-13
    9208:	00000806 	br	922c <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
    920c:	e0bfff17 	ldw	r2,-4(fp)
    9210:	10800044 	addi	r2,r2,1
    9214:	e0bfff15 	stw	r2,-4(fp)
    9218:	d0a00617 	ldw	r2,-32744(gp)
    921c:	1007883a 	mov	r3,r2
    9220:	e0bfff17 	ldw	r2,-4(fp)
    9224:	18bfe22e 	bgeu	r3,r2,91b0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9228:	0005883a 	mov	r2,zero
}
    922c:	e037883a 	mov	sp,fp
    9230:	df000017 	ldw	fp,0(sp)
    9234:	dec00104 	addi	sp,sp,4
    9238:	f800283a 	ret

0000923c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    923c:	defff604 	addi	sp,sp,-40
    9240:	dfc00915 	stw	ra,36(sp)
    9244:	df000815 	stw	fp,32(sp)
    9248:	df000804 	addi	fp,sp,32
    924c:	e13ffa15 	stw	r4,-24(fp)
    9250:	e17ff915 	stw	r5,-28(fp)
    9254:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9258:	00bfffc4 	movi	r2,-1
    925c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    9260:	00bffb44 	movi	r2,-19
    9264:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    9268:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    926c:	d1600404 	addi	r5,gp,-32752
    9270:	e13ffa17 	ldw	r4,-24(fp)
    9274:	00095dc0 	call	95dc <alt_find_dev>
    9278:	e0bfff15 	stw	r2,-4(fp)
    927c:	e0bfff17 	ldw	r2,-4(fp)
    9280:	1000051e 	bne	r2,zero,9298 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9284:	e13ffa17 	ldw	r4,-24(fp)
    9288:	000966c0 	call	966c <alt_find_file>
    928c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    9290:	00800044 	movi	r2,1
    9294:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9298:	e0bfff17 	ldw	r2,-4(fp)
    929c:	10002926 	beq	r2,zero,9344 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    92a0:	e13fff17 	ldw	r4,-4(fp)
    92a4:	00097740 	call	9774 <alt_get_fd>
    92a8:	e0bffe15 	stw	r2,-8(fp)
    92ac:	e0bffe17 	ldw	r2,-8(fp)
    92b0:	1000030e 	bge	r2,zero,92c0 <open+0x84>
    {
      status = index;
    92b4:	e0bffe17 	ldw	r2,-8(fp)
    92b8:	e0bffd15 	stw	r2,-12(fp)
    92bc:	00002306 	br	934c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    92c0:	e0bffe17 	ldw	r2,-8(fp)
    92c4:	10c00324 	muli	r3,r2,12
    92c8:	00800074 	movhi	r2,1
    92cc:	10a71304 	addi	r2,r2,-25524
    92d0:	1885883a 	add	r2,r3,r2
    92d4:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    92d8:	e0fff917 	ldw	r3,-28(fp)
    92dc:	00900034 	movhi	r2,16384
    92e0:	10bfffc4 	addi	r2,r2,-1
    92e4:	1886703a 	and	r3,r3,r2
    92e8:	e0bffb17 	ldw	r2,-20(fp)
    92ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    92f0:	e0bffc17 	ldw	r2,-16(fp)
    92f4:	1000051e 	bne	r2,zero,930c <open+0xd0>
    92f8:	e13ffb17 	ldw	r4,-20(fp)
    92fc:	00091840 	call	9184 <alt_file_locked>
    9300:	e0bffd15 	stw	r2,-12(fp)
    9304:	e0bffd17 	ldw	r2,-12(fp)
    9308:	10001016 	blt	r2,zero,934c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    930c:	e0bfff17 	ldw	r2,-4(fp)
    9310:	10800317 	ldw	r2,12(r2)
    9314:	10000826 	beq	r2,zero,9338 <open+0xfc>
    9318:	e0bfff17 	ldw	r2,-4(fp)
    931c:	10800317 	ldw	r2,12(r2)
    9320:	e1fff817 	ldw	r7,-32(fp)
    9324:	e1bff917 	ldw	r6,-28(fp)
    9328:	e17ffa17 	ldw	r5,-24(fp)
    932c:	e13ffb17 	ldw	r4,-20(fp)
    9330:	103ee83a 	callr	r2
    9334:	00000106 	br	933c <open+0x100>
    9338:	0005883a 	mov	r2,zero
    933c:	e0bffd15 	stw	r2,-12(fp)
    9340:	00000206 	br	934c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9344:	00bffb44 	movi	r2,-19
    9348:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    934c:	e0bffd17 	ldw	r2,-12(fp)
    9350:	1000090e 	bge	r2,zero,9378 <open+0x13c>
  {
    alt_release_fd (index);  
    9354:	e13ffe17 	ldw	r4,-8(fp)
    9358:	00093900 	call	9390 <alt_release_fd>
    ALT_ERRNO = -status;
    935c:	00091480 	call	9148 <alt_get_errno>
    9360:	1007883a 	mov	r3,r2
    9364:	e0bffd17 	ldw	r2,-12(fp)
    9368:	0085c83a 	sub	r2,zero,r2
    936c:	18800015 	stw	r2,0(r3)
    return -1;
    9370:	00bfffc4 	movi	r2,-1
    9374:	00000106 	br	937c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    9378:	e0bffe17 	ldw	r2,-8(fp)
}
    937c:	e037883a 	mov	sp,fp
    9380:	dfc00117 	ldw	ra,4(sp)
    9384:	df000017 	ldw	fp,0(sp)
    9388:	dec00204 	addi	sp,sp,8
    938c:	f800283a 	ret

00009390 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9390:	defffe04 	addi	sp,sp,-8
    9394:	df000115 	stw	fp,4(sp)
    9398:	df000104 	addi	fp,sp,4
    939c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    93a0:	e0bfff17 	ldw	r2,-4(fp)
    93a4:	108000d0 	cmplti	r2,r2,3
    93a8:	10000a1e 	bne	r2,zero,93d4 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
    93ac:	e0bfff17 	ldw	r2,-4(fp)
    93b0:	10c00324 	muli	r3,r2,12
    93b4:	00800074 	movhi	r2,1
    93b8:	1885883a 	add	r2,r3,r2
    93bc:	10271515 	stw	zero,-25516(r2)
    alt_fd_list[fd].dev      = 0;
    93c0:	e0bfff17 	ldw	r2,-4(fp)
    93c4:	10c00324 	muli	r3,r2,12
    93c8:	00800074 	movhi	r2,1
    93cc:	1885883a 	add	r2,r3,r2
    93d0:	10271315 	stw	zero,-25524(r2)
  }
}
    93d4:	0001883a 	nop
    93d8:	e037883a 	mov	sp,fp
    93dc:	df000017 	ldw	fp,0(sp)
    93e0:	dec00104 	addi	sp,sp,4
    93e4:	f800283a 	ret

000093e8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    93e8:	defffa04 	addi	sp,sp,-24
    93ec:	df000515 	stw	fp,20(sp)
    93f0:	df000504 	addi	fp,sp,20
    93f4:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    93f8:	0005303a 	rdctl	r2,status
    93fc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9400:	e0fffc17 	ldw	r3,-16(fp)
    9404:	00bfff84 	movi	r2,-2
    9408:	1884703a 	and	r2,r3,r2
    940c:	1001703a 	wrctl	status,r2
  return context;
    9410:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    9414:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    9418:	e0bffb17 	ldw	r2,-20(fp)
    941c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9420:	e0bffd17 	ldw	r2,-12(fp)
    9424:	10800017 	ldw	r2,0(r2)
    9428:	e0fffd17 	ldw	r3,-12(fp)
    942c:	18c00117 	ldw	r3,4(r3)
    9430:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    9434:	e0bffd17 	ldw	r2,-12(fp)
    9438:	10800117 	ldw	r2,4(r2)
    943c:	e0fffd17 	ldw	r3,-12(fp)
    9440:	18c00017 	ldw	r3,0(r3)
    9444:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    9448:	e0bffd17 	ldw	r2,-12(fp)
    944c:	e0fffd17 	ldw	r3,-12(fp)
    9450:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    9454:	e0bffd17 	ldw	r2,-12(fp)
    9458:	e0fffd17 	ldw	r3,-12(fp)
    945c:	10c00015 	stw	r3,0(r2)
} 
    9460:	0001883a 	nop
    9464:	e0bfff17 	ldw	r2,-4(fp)
    9468:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    946c:	e0bffe17 	ldw	r2,-8(fp)
    9470:	1001703a 	wrctl	status,r2
}
    9474:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    9478:	0001883a 	nop
    947c:	e037883a 	mov	sp,fp
    9480:	df000017 	ldw	fp,0(sp)
    9484:	dec00104 	addi	sp,sp,4
    9488:	f800283a 	ret

0000948c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    948c:	defff904 	addi	sp,sp,-28
    9490:	dfc00615 	stw	ra,24(sp)
    9494:	df000515 	stw	fp,20(sp)
    9498:	dc400415 	stw	r17,16(sp)
    949c:	dc000315 	stw	r16,12(sp)
    94a0:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    94a4:	d0a00917 	ldw	r2,-32732(gp)
    94a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    94ac:	d120ca17 	ldw	r4,-31960(gp)
    94b0:	d160cb17 	ldw	r5,-31956(gp)
    94b4:	01800044 	movi	r6,1
    94b8:	000f883a 	mov	r7,zero
    94bc:	2185883a 	add	r2,r4,r6
    94c0:	1111803a 	cmpltu	r8,r2,r4
    94c4:	29c7883a 	add	r3,r5,r7
    94c8:	40c9883a 	add	r4,r8,r3
    94cc:	2007883a 	mov	r3,r4
    94d0:	1009883a 	mov	r4,r2
    94d4:	180b883a 	mov	r5,r3
    94d8:	d120ca15 	stw	r4,-31960(gp)
    94dc:	d160cb15 	stw	r5,-31956(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    94e0:	00002906 	br	9588 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
    94e4:	e0bffd17 	ldw	r2,-12(fp)
    94e8:	10800017 	ldw	r2,0(r2)
    94ec:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    94f0:	e13ffd17 	ldw	r4,-12(fp)
    94f4:	20800217 	ldw	r2,8(r4)
    94f8:	20c00317 	ldw	r3,12(r4)
    94fc:	d120ca17 	ldw	r4,-31960(gp)
    9500:	d160cb17 	ldw	r5,-31956(gp)
    9504:	28c01e36 	bltu	r5,r3,9580 <alt_tick+0xf4>
    9508:	1940011e 	bne	r3,r5,9510 <alt_tick+0x84>
    950c:	20801c36 	bltu	r4,r2,9580 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
    9510:	e0bffd17 	ldw	r2,-12(fp)
    9514:	10800417 	ldw	r2,16(r2)
    9518:	e0fffd17 	ldw	r3,-12(fp)
    951c:	18c00517 	ldw	r3,20(r3)
    9520:	1809883a 	mov	r4,r3
    9524:	103ee83a 	callr	r2
    9528:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    952c:	e0bffb17 	ldw	r2,-20(fp)
    9530:	1000031e 	bne	r2,zero,9540 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
    9534:	e13ffd17 	ldw	r4,-12(fp)
    9538:	00093e80 	call	93e8 <alt_alarm_stop>
    953c:	00001006 	br	9580 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
    9540:	e0bffd17 	ldw	r2,-12(fp)
    9544:	11000217 	ldw	r4,8(r2)
    9548:	11400317 	ldw	r5,12(r2)
    954c:	e0bffb17 	ldw	r2,-20(fp)
    9550:	1021883a 	mov	r16,r2
    9554:	0023883a 	mov	r17,zero
    9558:	2405883a 	add	r2,r4,r16
    955c:	110d803a 	cmpltu	r6,r2,r4
    9560:	2c47883a 	add	r3,r5,r17
    9564:	30c9883a 	add	r4,r6,r3
    9568:	2007883a 	mov	r3,r4
    956c:	1009883a 	mov	r4,r2
    9570:	180b883a 	mov	r5,r3
    9574:	e0bffd17 	ldw	r2,-12(fp)
    9578:	11000215 	stw	r4,8(r2)
    957c:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
    9580:	e0bffc17 	ldw	r2,-16(fp)
    9584:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    9588:	e0fffd17 	ldw	r3,-12(fp)
    958c:	d0a00904 	addi	r2,gp,-32732
    9590:	18bfd41e 	bne	r3,r2,94e4 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    9594:	0001883a 	nop
}
    9598:	0001883a 	nop
    959c:	e6fffe04 	addi	sp,fp,-8
    95a0:	dfc00317 	ldw	ra,12(sp)
    95a4:	df000217 	ldw	fp,8(sp)
    95a8:	dc400117 	ldw	r17,4(sp)
    95ac:	dc000017 	ldw	r16,0(sp)
    95b0:	dec00404 	addi	sp,sp,16
    95b4:	f800283a 	ret

000095b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    95b8:	deffff04 	addi	sp,sp,-4
    95bc:	df000015 	stw	fp,0(sp)
    95c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    95c4:	000170fa 	wrctl	ienable,zero
}
    95c8:	0001883a 	nop
    95cc:	e037883a 	mov	sp,fp
    95d0:	df000017 	ldw	fp,0(sp)
    95d4:	dec00104 	addi	sp,sp,4
    95d8:	f800283a 	ret

000095dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    95dc:	defffa04 	addi	sp,sp,-24
    95e0:	dfc00515 	stw	ra,20(sp)
    95e4:	df000415 	stw	fp,16(sp)
    95e8:	df000404 	addi	fp,sp,16
    95ec:	e13ffd15 	stw	r4,-12(fp)
    95f0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    95f4:	e0bffc17 	ldw	r2,-16(fp)
    95f8:	10800017 	ldw	r2,0(r2)
    95fc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9600:	e13ffd17 	ldw	r4,-12(fp)
    9604:	00083480 	call	8348 <strlen>
    9608:	10800044 	addi	r2,r2,1
    960c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9610:	00000d06 	br	9648 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9614:	e0bfff17 	ldw	r2,-4(fp)
    9618:	10800217 	ldw	r2,8(r2)
    961c:	e0fffe17 	ldw	r3,-8(fp)
    9620:	180d883a 	mov	r6,r3
    9624:	e17ffd17 	ldw	r5,-12(fp)
    9628:	1009883a 	mov	r4,r2
    962c:	00099380 	call	9938 <memcmp>
    9630:	1000021e 	bne	r2,zero,963c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9634:	e0bfff17 	ldw	r2,-4(fp)
    9638:	00000706 	br	9658 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    963c:	e0bfff17 	ldw	r2,-4(fp)
    9640:	10800017 	ldw	r2,0(r2)
    9644:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    9648:	e0ffff17 	ldw	r3,-4(fp)
    964c:	e0bffc17 	ldw	r2,-16(fp)
    9650:	18bff01e 	bne	r3,r2,9614 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    9654:	0005883a 	mov	r2,zero
}
    9658:	e037883a 	mov	sp,fp
    965c:	dfc00117 	ldw	ra,4(sp)
    9660:	df000017 	ldw	fp,0(sp)
    9664:	dec00204 	addi	sp,sp,8
    9668:	f800283a 	ret

0000966c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    966c:	defffb04 	addi	sp,sp,-20
    9670:	dfc00415 	stw	ra,16(sp)
    9674:	df000315 	stw	fp,12(sp)
    9678:	df000304 	addi	fp,sp,12
    967c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9680:	d0a00217 	ldw	r2,-32760(gp)
    9684:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9688:	00003106 	br	9750 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    968c:	e0bfff17 	ldw	r2,-4(fp)
    9690:	10800217 	ldw	r2,8(r2)
    9694:	1009883a 	mov	r4,r2
    9698:	00083480 	call	8348 <strlen>
    969c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    96a0:	e0bfff17 	ldw	r2,-4(fp)
    96a4:	10c00217 	ldw	r3,8(r2)
    96a8:	e0bffe17 	ldw	r2,-8(fp)
    96ac:	10bfffc4 	addi	r2,r2,-1
    96b0:	1885883a 	add	r2,r3,r2
    96b4:	10800003 	ldbu	r2,0(r2)
    96b8:	10803fcc 	andi	r2,r2,255
    96bc:	1080201c 	xori	r2,r2,128
    96c0:	10bfe004 	addi	r2,r2,-128
    96c4:	10800bd8 	cmpnei	r2,r2,47
    96c8:	1000031e 	bne	r2,zero,96d8 <alt_find_file+0x6c>
    {
      len -= 1;
    96cc:	e0bffe17 	ldw	r2,-8(fp)
    96d0:	10bfffc4 	addi	r2,r2,-1
    96d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    96d8:	e0bffe17 	ldw	r2,-8(fp)
    96dc:	e0fffd17 	ldw	r3,-12(fp)
    96e0:	1885883a 	add	r2,r3,r2
    96e4:	10800003 	ldbu	r2,0(r2)
    96e8:	10803fcc 	andi	r2,r2,255
    96ec:	1080201c 	xori	r2,r2,128
    96f0:	10bfe004 	addi	r2,r2,-128
    96f4:	10800be0 	cmpeqi	r2,r2,47
    96f8:	1000081e 	bne	r2,zero,971c <alt_find_file+0xb0>
    96fc:	e0bffe17 	ldw	r2,-8(fp)
    9700:	e0fffd17 	ldw	r3,-12(fp)
    9704:	1885883a 	add	r2,r3,r2
    9708:	10800003 	ldbu	r2,0(r2)
    970c:	10803fcc 	andi	r2,r2,255
    9710:	1080201c 	xori	r2,r2,128
    9714:	10bfe004 	addi	r2,r2,-128
    9718:	10000a1e 	bne	r2,zero,9744 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    971c:	e0bfff17 	ldw	r2,-4(fp)
    9720:	10800217 	ldw	r2,8(r2)
    9724:	e0fffe17 	ldw	r3,-8(fp)
    9728:	180d883a 	mov	r6,r3
    972c:	e17ffd17 	ldw	r5,-12(fp)
    9730:	1009883a 	mov	r4,r2
    9734:	00099380 	call	9938 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    9738:	1000021e 	bne	r2,zero,9744 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    973c:	e0bfff17 	ldw	r2,-4(fp)
    9740:	00000706 	br	9760 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    9744:	e0bfff17 	ldw	r2,-4(fp)
    9748:	10800017 	ldw	r2,0(r2)
    974c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    9750:	e0ffff17 	ldw	r3,-4(fp)
    9754:	d0a00204 	addi	r2,gp,-32760
    9758:	18bfcc1e 	bne	r3,r2,968c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    975c:	0005883a 	mov	r2,zero
}
    9760:	e037883a 	mov	sp,fp
    9764:	dfc00117 	ldw	ra,4(sp)
    9768:	df000017 	ldw	fp,0(sp)
    976c:	dec00204 	addi	sp,sp,8
    9770:	f800283a 	ret

00009774 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9774:	defffc04 	addi	sp,sp,-16
    9778:	df000315 	stw	fp,12(sp)
    977c:	df000304 	addi	fp,sp,12
    9780:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    9784:	00bffa04 	movi	r2,-24
    9788:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    978c:	e03fff15 	stw	zero,-4(fp)
    9790:	00001706 	br	97f0 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
    9794:	e0bfff17 	ldw	r2,-4(fp)
    9798:	10c00324 	muli	r3,r2,12
    979c:	00800074 	movhi	r2,1
    97a0:	1885883a 	add	r2,r3,r2
    97a4:	10a71317 	ldw	r2,-25524(r2)
    97a8:	10000e1e 	bne	r2,zero,97e4 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
    97ac:	e0bfff17 	ldw	r2,-4(fp)
    97b0:	11000324 	muli	r4,r2,12
    97b4:	e0fffd17 	ldw	r3,-12(fp)
    97b8:	00800074 	movhi	r2,1
    97bc:	2085883a 	add	r2,r4,r2
    97c0:	10e71315 	stw	r3,-25524(r2)
      if (i > alt_max_fd)
    97c4:	d0e00617 	ldw	r3,-32744(gp)
    97c8:	e0bfff17 	ldw	r2,-4(fp)
    97cc:	1880020e 	bge	r3,r2,97d8 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
    97d0:	e0bfff17 	ldw	r2,-4(fp)
    97d4:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    97d8:	e0bfff17 	ldw	r2,-4(fp)
    97dc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    97e0:	00000706 	br	9800 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
    97e4:	e0bfff17 	ldw	r2,-4(fp)
    97e8:	10800044 	addi	r2,r2,1
    97ec:	e0bfff15 	stw	r2,-4(fp)
    97f0:	e0bfff17 	ldw	r2,-4(fp)
    97f4:	10800810 	cmplti	r2,r2,32
    97f8:	103fe61e 	bne	r2,zero,9794 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    97fc:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9800:	e0bffe17 	ldw	r2,-8(fp)
}
    9804:	e037883a 	mov	sp,fp
    9808:	df000017 	ldw	fp,0(sp)
    980c:	dec00104 	addi	sp,sp,4
    9810:	f800283a 	ret

00009814 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    9814:	defffb04 	addi	sp,sp,-20
    9818:	df000415 	stw	fp,16(sp)
    981c:	df000404 	addi	fp,sp,16
    9820:	e13ffd15 	stw	r4,-12(fp)
    9824:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    9828:	e0bffc17 	ldw	r2,-16(fp)
    982c:	10820070 	cmpltui	r2,r2,2049
    9830:	1000021e 	bne	r2,zero,983c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    9834:	00820004 	movi	r2,2048
    9838:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
    983c:	e0fffd17 	ldw	r3,-12(fp)
    9840:	e0bffc17 	ldw	r2,-16(fp)
    9844:	1885883a 	add	r2,r3,r2
    9848:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    984c:	e0bffd17 	ldw	r2,-12(fp)
    9850:	e0bfff15 	stw	r2,-4(fp)
    9854:	00000506 	br	986c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    9858:	e0bfff17 	ldw	r2,-4(fp)
    985c:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9860:	e0bfff17 	ldw	r2,-4(fp)
    9864:	10800804 	addi	r2,r2,32
    9868:	e0bfff15 	stw	r2,-4(fp)
    986c:	e0ffff17 	ldw	r3,-4(fp)
    9870:	e0bffe17 	ldw	r2,-8(fp)
    9874:	18bff836 	bltu	r3,r2,9858 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    9878:	e0bffd17 	ldw	r2,-12(fp)
    987c:	108007cc 	andi	r2,r2,31
    9880:	10000226 	beq	r2,zero,988c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    9884:	e0bfff17 	ldw	r2,-4(fp)
    9888:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    988c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    9890:	0001883a 	nop
    9894:	e037883a 	mov	sp,fp
    9898:	df000017 	ldw	fp,0(sp)
    989c:	dec00104 	addi	sp,sp,4
    98a0:	f800283a 	ret

000098a4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    98a4:	defffe04 	addi	sp,sp,-8
    98a8:	df000115 	stw	fp,4(sp)
    98ac:	df000104 	addi	fp,sp,4
    98b0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    98b4:	e0bfff17 	ldw	r2,-4(fp)
    98b8:	10bffe84 	addi	r2,r2,-6
    98bc:	10c00428 	cmpgeui	r3,r2,16
    98c0:	18c03fcc 	andi	r3,r3,255
    98c4:	18000f1e 	bne	r3,zero,9904 <alt_exception_cause_generated_bad_addr+0x60>
    98c8:	00c00044 	movi	r3,1
    98cc:	1884983a 	sll	r2,r3,r2
    98d0:	10e2c8cc 	andi	r3,r2,35619
    98d4:	1806c03a 	cmpne	r3,r3,zero
    98d8:	18c03fcc 	andi	r3,r3,255
    98dc:	1800051e 	bne	r3,zero,98f4 <alt_exception_cause_generated_bad_addr+0x50>
    98e0:	1084100c 	andi	r2,r2,4160
    98e4:	1004c03a 	cmpne	r2,r2,zero
    98e8:	10803fcc 	andi	r2,r2,255
    98ec:	1000031e 	bne	r2,zero,98fc <alt_exception_cause_generated_bad_addr+0x58>
    98f0:	00000406 	br	9904 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    98f4:	00800044 	movi	r2,1
    98f8:	00000306 	br	9908 <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    98fc:	0005883a 	mov	r2,zero
    9900:	00000106 	br	9908 <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
    9904:	0005883a 	mov	r2,zero
  }
}
    9908:	e037883a 	mov	sp,fp
    990c:	df000017 	ldw	fp,0(sp)
    9910:	dec00104 	addi	sp,sp,4
    9914:	f800283a 	ret

00009918 <exit>:
    9918:	defffe04 	addi	sp,sp,-8
    991c:	000b883a 	mov	r5,zero
    9920:	dc000015 	stw	r16,0(sp)
    9924:	dfc00115 	stw	ra,4(sp)
    9928:	2021883a 	mov	r16,r4
    992c:	00099680 	call	9968 <__call_exitprocs>
    9930:	8009883a 	mov	r4,r16
    9934:	0009a940 	call	9a94 <_exit>

00009938 <memcmp>:
    9938:	0007883a 	mov	r3,zero
    993c:	30c0021e 	bne	r6,r3,9948 <memcmp+0x10>
    9940:	0005883a 	mov	r2,zero
    9944:	f800283a 	ret
    9948:	20c5883a 	add	r2,r4,r3
    994c:	18c00044 	addi	r3,r3,1
    9950:	28cf883a 	add	r7,r5,r3
    9954:	10800003 	ldbu	r2,0(r2)
    9958:	39ffffc3 	ldbu	r7,-1(r7)
    995c:	11fff726 	beq	r2,r7,993c <memcmp+0x4>
    9960:	11c5c83a 	sub	r2,r2,r7
    9964:	f800283a 	ret

00009968 <__call_exitprocs>:
    9968:	defff504 	addi	sp,sp,-44
    996c:	00800074 	movhi	r2,1
    9970:	dd800715 	stw	r22,28(sp)
    9974:	15a77317 	ldw	r22,-25140(r2)
    9978:	ddc00815 	stw	r23,32(sp)
    997c:	dd000515 	stw	r20,20(sp)
    9980:	dfc00a15 	stw	ra,40(sp)
    9984:	df000915 	stw	fp,36(sp)
    9988:	dd400615 	stw	r21,24(sp)
    998c:	dcc00415 	stw	r19,16(sp)
    9990:	dc800315 	stw	r18,12(sp)
    9994:	dc400215 	stw	r17,8(sp)
    9998:	dc000115 	stw	r16,4(sp)
    999c:	d9000015 	stw	r4,0(sp)
    99a0:	2829883a 	mov	r20,r5
    99a4:	05c00044 	movi	r23,1
    99a8:	b4400d17 	ldw	r17,52(r22)
    99ac:	88000726 	beq	r17,zero,99cc <__call_exitprocs+0x64>
    99b0:	8c000117 	ldw	r16,4(r17)
    99b4:	8cc02217 	ldw	r19,136(r17)
    99b8:	84bfffc4 	addi	r18,r16,-1
    99bc:	802090ba 	slli	r16,r16,2
    99c0:	9c2b883a 	add	r21,r19,r16
    99c4:	8c21883a 	add	r16,r17,r16
    99c8:	90000c0e 	bge	r18,zero,99fc <__call_exitprocs+0x94>
    99cc:	dfc00a17 	ldw	ra,40(sp)
    99d0:	df000917 	ldw	fp,36(sp)
    99d4:	ddc00817 	ldw	r23,32(sp)
    99d8:	dd800717 	ldw	r22,28(sp)
    99dc:	dd400617 	ldw	r21,24(sp)
    99e0:	dd000517 	ldw	r20,20(sp)
    99e4:	dcc00417 	ldw	r19,16(sp)
    99e8:	dc800317 	ldw	r18,12(sp)
    99ec:	dc400217 	ldw	r17,8(sp)
    99f0:	dc000117 	ldw	r16,4(sp)
    99f4:	dec00b04 	addi	sp,sp,44
    99f8:	f800283a 	ret
    99fc:	a0000726 	beq	r20,zero,9a1c <__call_exitprocs+0xb4>
    9a00:	9800041e 	bne	r19,zero,9a14 <__call_exitprocs+0xac>
    9a04:	94bfffc4 	addi	r18,r18,-1
    9a08:	ad7fff04 	addi	r21,r21,-4
    9a0c:	843fff04 	addi	r16,r16,-4
    9a10:	003fed06 	br	99c8 <__call_exitprocs+0x60>
    9a14:	a8c01f17 	ldw	r3,124(r21)
    9a18:	1d3ffa1e 	bne	r3,r20,9a04 <__call_exitprocs+0x9c>
    9a1c:	89000117 	ldw	r4,4(r17)
    9a20:	80c00117 	ldw	r3,4(r16)
    9a24:	213fffc4 	addi	r4,r4,-1
    9a28:	24800e1e 	bne	r4,r18,9a64 <__call_exitprocs+0xfc>
    9a2c:	8c800115 	stw	r18,4(r17)
    9a30:	183ff426 	beq	r3,zero,9a04 <__call_exitprocs+0x9c>
    9a34:	8f000117 	ldw	fp,4(r17)
    9a38:	98000426 	beq	r19,zero,9a4c <__call_exitprocs+0xe4>
    9a3c:	bc8c983a 	sll	r6,r23,r18
    9a40:	99004017 	ldw	r4,256(r19)
    9a44:	3108703a 	and	r4,r6,r4
    9a48:	2000081e 	bne	r4,zero,9a6c <__call_exitprocs+0x104>
    9a4c:	183ee83a 	callr	r3
    9a50:	89000117 	ldw	r4,4(r17)
    9a54:	b0c00d17 	ldw	r3,52(r22)
    9a58:	273fd31e 	bne	r4,fp,99a8 <__call_exitprocs+0x40>
    9a5c:	88ffe926 	beq	r17,r3,9a04 <__call_exitprocs+0x9c>
    9a60:	003fd106 	br	99a8 <__call_exitprocs+0x40>
    9a64:	80000115 	stw	zero,4(r16)
    9a68:	003ff106 	br	9a30 <__call_exitprocs+0xc8>
    9a6c:	99404117 	ldw	r5,260(r19)
    9a70:	a93fff17 	ldw	r4,-4(r21)
    9a74:	314c703a 	and	r6,r6,r5
    9a78:	3000041e 	bne	r6,zero,9a8c <__call_exitprocs+0x124>
    9a7c:	200b883a 	mov	r5,r4
    9a80:	d9000017 	ldw	r4,0(sp)
    9a84:	183ee83a 	callr	r3
    9a88:	003ff106 	br	9a50 <__call_exitprocs+0xe8>
    9a8c:	183ee83a 	callr	r3
    9a90:	003fef06 	br	9a50 <__call_exitprocs+0xe8>

00009a94 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9a94:	defffd04 	addi	sp,sp,-12
    9a98:	df000215 	stw	fp,8(sp)
    9a9c:	df000204 	addi	fp,sp,8
    9aa0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    9aa4:	0001883a 	nop
    9aa8:	e0bffe17 	ldw	r2,-8(fp)
    9aac:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    9ab0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9ab4:	10000226 	beq	r2,zero,9ac0 <_exit+0x2c>
    ALT_SIM_FAIL();
    9ab8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    9abc:	00000106 	br	9ac4 <_exit+0x30>
    ALT_SIM_PASS();
    9ac0:	002af0b0 	cmpltui	zero,zero,43970
}
    9ac4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9ac8:	0001883a 	nop
    9acc:	003ffe06 	br	9ac8 <_exit+0x34>
